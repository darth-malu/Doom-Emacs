#+title: my config
#+author: justin malu
#+startup: inlineimages content indent
#+auto_tangle: t

#+begin_src emacs-lisp :tangle yes
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

* language major modes
** emacs lsp booster
#+begin_src emacs-lisp :tangle yes
(defun lsp-booster--advice-json-parse (old-fn &rest args)
  "Try to parse bytecode instead of json."
  (or
   (when (equal (following-char) ?#)
     (let ((bytecode (read (current-buffer))))
       (when (byte-code-function-p bytecode)
         (funcall bytecode))))
   (apply old-fn args)))
(advice-add (if (progn (require 'json)
                       (fboundp 'json-parse-buffer))
                'json-parse-buffer
              'json-read)
            :around
            #'lsp-booster--advice-json-parse)

(defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
  "Prepend emacs-lsp-booster command to lsp CMD."
  (let ((orig-result (funcall old-fn cmd test?)))
    (if (and (not test?)                             ;; for check lsp-server-present?
             (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
             lsp-use-plists
             (not (functionp 'json-rpc-connection))  ;; native json-rpc
             (executable-find "emacs-lsp-booster"))
        (progn
          (when-let ((command-from-exec-path (executable-find (car orig-result))))  ;; resolve command from exec-path (in case not found in $PATH)
            (setcar orig-result command-from-exec-path))
          (message "Using emacs-lsp-booster for %s!" orig-result)
          (cons "emacs-lsp-booster" orig-result))
      orig-result)))
(advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command)
#+end_src
** python
*** python-mode
#+begin_src emacs-lisp :tangle yes
(use-package! python
  ;; :custom (lsp-pyright-langserver-command "pyright") ;; pyright or basedpyright
  ;; (python-shell-interpreter "python3")
  :config
  ;;; jupytter
  ;; (setq python-shell-interpreter "jupyter"
  ;;       python-shell-interpreter-args "console --simple-prompt"
  ;;       python-shell-prompt-detect-failure-warning nil
  ;;       )
  ;; (add-to-list 'python-shell-completion-native-disabled-interpreters "jupyter")

  ;;; ipython
  (setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "-i --simple-prompt")

  :hook
  (python-mode . (lambda ()
                   (setq-local lsp-pyright-langserver-command "pyright") ;; pyright or basedpyright
                   (require 'lsp-pyright)
                   (setq +format-with 'black)
                   (lsp-deferred)
                   (local-set-key (kbd "C-c r") 'python-shell-send-region))))
#+end_src
source: [[https://emacs-lsp.github.io/lsp-pyright/]]

*** elpy
#+begin_src emacs-lisp :tangle yes
(use-package! elpy
  :defer t
  :init
  (advice-add 'python-mode :before 'elpy-enable))
;; :custom
;; (elpy-folding-fringe-indicators t)
;; (elpy-modules (delq 'elpy-module-highlight-indentation elpy-modules)) ; disable elpy indentation guide (ANNOYING)
;; :config
#+end_src

#+begin_src emacs-lisp :tangle yes
(after! elpy
  (setq elpy-modules (delq 'elpy-module-highlight-indentation elpy-modules))) ; disable elpy indentation guide (ANNOYING)
#+end_src

|---------+--------------------------------------------------------|
| =C-c C-c= | evaluate current script                                |
| =C-RET=   | evaluate current statement (plus nested lines)         |
| =C-c C-z= | switches between your script and the interactive shell |
| =C-c C-d= | display documentation for the thing under cursor       |
|---------+--------------------------------------------------------|
** Lsp Mode
*** lsp ui :ATTACH:
:PROPERTIES:
:ID:       a0d63e63-721c-484a-b913-c440463e72d1
:END:
https://github.com/emacs-lsp/lsp-ui

By default, =lsp-mode= automatically activates =lsp-ui= unless =lsp-auto-configure= is set to nil.

#+begin_src emacs-lisp :tangle no
(after! lsp-ui
  :custom
  ;; (lsp-ui-doc-show 'bottom)
  ;; (lsp-ui-doc-position 'top)
  (lsp-ui-doc-enable nil) ; use K
  ;; (lsp-ui-doc-show-with-cursor t)
  (lsp-ui-doc-show-with-mouse t)

  (lsp-ui-peek-show-directory t)
  (lsp-ui-peek-enable t)

  ;;;imenu
  (lsp-ui-imenu-auto-refresh) ; auto refresh when necessary
  ;; (lsp-ui-imenu-refresh-delay) ;FIXME Does not exists?
  (lsp-ui-imenu-buffer-position 'left)

  ;;;Sideline
  ;; (lsp-ui-sideline-enable nil)
  (lsp-ui-sideline-show-code-actions t)
  (lsp-enable-symbol-highlighting nil) ; symbol eg. print in python highlight
  (lsp-ui-sideline-show-hover nil) ; hide only hover symbols
  (lsp-ui-sideline-enable nil)
  ;; (lsp-ui-sideline-show-diagnostics nil) ;hide only errors

  ;;; eldoc
  ;; (lsp-eldoc-enable-hover nil)

  ;;;modeline
  ;; (lsp-modeline-code-actions-enable nil)
  ;; (lsp-modeline-diagnostics-enable nil)

  ;;; lenses
  ;; (lsp-lens-enable nil)

  ;;;headerline
  (lsp-headerline-breadcrumb-enable t)

  ;;;flycheck
  ;; (lsp-diagnostics-provider :none) ; flycheck or flymake (if noflycheck is present)

  ;;;completion
  ;; (lsp-completion-show-detail nil) ;t::
  ;; (lsp-completion-show-kind nil)
  ;; (lsp-completion-provider :none) ; (company mode)
  )
#+end_src

https://emacs-lsp.github.io/lsp-ui/


https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/
*** lsp treemacs
#+begin_src emacs-lisp :tangle yes
(use-package lsp-treemacs
  :after lsp)
#+end_src
*** lsp-mode
#+begin_src emacs-lisp :tangle yes
(after! lsp-mode
  (setq lsp-enable-symbol-highlighting nil
        lsp-enable-suggest-server-download nil))
#+end_src

** nix
https://github.com/NixOS/nix-mode
*** nil lsp
nil: An incremental analysis assistant for writing in Nix.
#+begin_src emacs-lisp :tangle no
(use-package! lsp-nix
  ;; :ensure lsp-mode
  :after (lsp-mode)
  :demand t
  :custom
  (lsp-nix-nil-formatter ["nixfmt"]))

(use-package! nix-mode
  :hook (nix-mode . lsp-deferred)
  :ensure nil)
#+end_src

*** nixd
#+begin_src emacs-lisp :tangle no
(use-package! nix-mode
:after lsp-mode
:ensure nil
:hook
(nix-mode . lsp-deferred) ;; So that envrc mode will work
:custom
(lsp-disabled-clients '((nix-mode . nix-nil))) ;; Disable nil so that nixd will be used as lsp-server
:config
(setq lsp-nix-nixd-server-path "nixd"
      lsp-nix-nixd-formatting-command [ "nixfmt" ]
      lsp-nix-nixd-nixpkgs-expr "import <nixpkgs> { }"
      lsp-nix-nixd-nixos-options-expr "(builtins.getFlake \"/home/nb/nixos\").nixosConfigurations.mnd.options"
      lsp-nix-nixd-home-manager-options-expr "(builtins.getFlake \"/home/nb/nixos\").homeConfigurations.\"nb@mnd\".options"))

;; (add-hook!! 'nix-mode-hook
         ;; enable autocompletion with company
         ;; (setq company-idle-delay 0.1))
#+end_src

* DOOM functionality
** fonts

change fonts on the fly [[file:~/org/roam/20250401030930-doom_emacs.org::*To change fonts on the fly:][Link to my notes]]

#+begin_src emacs-lisp :tangle yes
  (setq
    doom-symbol-font (font-spec :family "Symbols Nerd Font")
    doom-font (font-spec :family "JetBrains Mono" :size 15 :weight 'medium )
    ;; doom-font (font-spec :family "Iosevka Comfy" :size 16 :weight 'medium )
    doom-emoji-font (font-spec :family "Noto Color Emoji")
    ;; doom-unicode-font
    ;; doom-serif-font
    doom-variable-pitch-font (font-spec :family "VictorMono Nerd Font" :size 14))
#+end_src

=Ligatures=
#FIXME Make this work for org
#+begin_src emacs-lisp :tangle no
(set-font-ligatures! '(org-mode) ">>=" ">>-")
#+end_src
** modeline

works !!...height too small thought :height 0.9

#+begin_src emacs-lisp :tangle yes
(custom-set-faces!
  ;; '(mode-line :family "Iosevka Comfy" :size 15)
  '(mode-line :family "Mononoki Nerd Font" :size 15)
  ;; '(doom-modeline-buffer-modified :foreground "green") ; color of modified buffer indicator
  '(mode-line-inactive :family "SpaceMono Nerd Font" :size 16))

;;; ui
(setq
      ;; doom-modeline-modal nil
      doom-modeline-check-simple-format t)
#+end_src

=Nice Fonts=
+ Mononoki Nerd Font
+ SpaceMono Nerd Font
+ VictorMono Nerd Font
 
** custom start mode

#+begin_src emacs-lisp :tangle no
(define-minor-mode start-mode
  "Provide functions for custom start page"
  :lighter " start"
  :keymap (let ((map (make-sparse-keymap)))
                (evil-define-key 'normal start-mode-map
                  (kbd "1") '(lambda () (interactive) (find-file "~/.doom.d/packages.org")))
                map))
;;(add-hook! 'start-mode-hook 'read-only-mode) ;;make start org read only
(provide 'start-mode)
#+end_src

** keybindings
#+begin_src emacs-lisp :tangle no
;; (keymap-global-set "M-;" 'save-buffer) ;easier saving
;; (keymap-global-set "U" 'evil-redo) ;easier redo :)
#+end_src
** emacs sane
#+begin_src elisp :tangle yes
(use-package! emacs
  ;; :init

  :custom
  (tab-width 2) ; TODO differentiate see custom-set-variable
  (display-line-numbers-type nil) ;relative , - perfomance enhance...turn on if needed
  (auto-save-default t)
  ;; (auto-save-interval 300)
  ;; (undo-limit 80000000)
  (delete-by-moving-to-trash t) ; use system trash can
  ;; (x-stretch-cursor t) ; see if needed really
  (bookmark-save-flag 1) ; TODO see docs
  ;; (uniquify-buffer-name-style 'post-forward) ;nil::
  ;; (electric-pair-mode 1)
  (backup-directory-alist '((".*" . "~/.local/share/Trash/files"))) ; delete to trash instead of create backup files with .el~ suffix (alot of clutter)
  ;; (inhibit-startup-message t)

  (doom-fallback-buffer-name "Doom Emacs") ; *doom*
  (+doom-dashboard-name "Doom Emacs Dashboard")

  (+evil-want-o/O-to-continue-comments nil) ; o/O does not continue comment to next new line 😸
  (evil-move-cursor-back nil)               ; don't move cursor back one CHAR when exiting insert mode
  (evil-shift-width 2)

  (user-full-name "Justin Malu") ; foor GPG config, email clients, file templates & snippets ; optional
  (user-mail-address "justinmalu@gmail.com")

  (scroll-margin 18) ; Adjust the number as needed
  (scroll-conservatively 101) ; TODO test usefulness

  :config
  (global-set-key [escape] 'keyboard-escape-quit) ; By default, Emacs requires you to hit ESC three times to escape quit the minibuffer.
  (global-auto-revert-mode t)
  (drag-stuff-global-mode 1)
  (drag-stuff-define-keys)
  (display-time-mode 1)                             ; Enable time in the line-mode
  ;; (vi-tilde-fringe-mode -1)

  :bind
  (:map evil-normal-state-map
        ;;;misc
        ("M-;" . save-buffer)
        ("C-M-o" . consult-outline)

        ;;; EOL, BOL
        ("M-l" . end-of-line) ; clash with other settings - capitalise, org-metaright
        ("M-h" . beginning-of-line-text)
        ("M-S-l" . end-of-visual-line)
        ("M-S-h" . beginning-of-visual-line)

        ;;; insert newline below/above
        ("M-o" . +evil/insert-newline-below)
        ("M-O" . +evil/insert-newline-above)))
;; ("U" . evil-redo)
#+end_src

#+begin_src emacs-lisp :tangle yes
(customize-set-variable 'uniquify-buffer-name-style 'post-forward)
(customize-set-variable 'uniquify-separator " || ") ;💎
#+end_src

+ =Docs=
  Reverting a Buffer:
  The fundamental action is "reverting a buffer," which means replacing the current buffer's text with the text from the file on disk. This is useful when:
    + You've made changes in Emacs but want to discard them and return to the saved version.
    + Another program has modified the file, and you want to update the Emacs buffer to reflect those changes.

  Auto Revert Mode:
  Emacs also provides "auto-revert-mode," which automates this process. When enabled, Emacs periodically checks if the file on disk has changed and automatically updates the buffer. This is particularly useful for:
    + Viewing log files that are constantly being updated.
    + Keeping your Emacs buffer synchronized with files modified by other applications.
** format +onsave disabled modes
#+begin_src emacs-lisp :tangle yes
(customize-set-variable '+format-on-save-disabled-modes '(nxml-mode))
#+end_src
** buffer location in window
#+begin_src emacs-lisp :tangle no
(setq display-buffer-alist
      '(
        ;; Anatomy of an entry
        ;; ( BUFFER-MATCHER
        ;;  LIST-OF-DISPLAY-FUNCTIONS
        ;;  &optional PARAMETERS)

        ("\\*Occur\\*"
        (display-buffer-reuse-mode-window
         display-buffer-below-selected)

        (window-height . fit-window-to-buffer)
        (dedicated . t)

        )))
#+end_src

** experiment
*** initial buffer
 #+begin_src emacs-lisp :tangle no
(setq initial-buffer-choice "~/.doom.d/config.org") ;
 #+end_src

*** witchmacs stuff

https://github.com/snackon/Witchmacs/

=Witchmacs= :witch:
#+begin_src emacs-lisp :tangle no
(setq-default tab-width 4)
(setq-default standard-indent 4)
(setq c-basic-offset tab-width)
(setq-default electric-indent-inhibit t)
(setq-default indent-tabs-mode t)
(setq backward-delete-char-untabify-method 'nil)
#+end_src

*** hide #+begin_src end_src blocks
**** FIX does not work well...with doom? better way?
see plugin options
#+begin_src emacs-lisp :tangle no
(let ((background-color (face-attribute 'default :background)))
  (set-face-attribute 'org-block-begin-line nil
                      :foreground background-color
                      :background background-color))
#+end_src
*** sane defaults
**** select and type
#+begin_src emacs-lisp :tangle no
(delete-selection-mode 1)
#+end_src
***** TODO see if works/needed
**** weird emacs indent?
Turn off the weird indenting that Emacs does by default.
#+begin_src emacs-lisp :tangle yes
(setq electric-pair-pairs '(
                            (?\{ . ?\})
                            (?\( . ?\))
                            (?\[ . ?\])
                            (?\" . ?\")
                            ))
;; (electric-indent-mode -1)
#+end_src
***** TODO test further
**** creating a new window switches cursor to it
#+begin_src emacs-lisp :tangle yes
 (defun split-and-follow-horizontally ()
	(interactive)
	(split-window-below)
	(balance-windows)
	(other-window 1))
 (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

 (defun split-and-follow-vertically ()
	(interactive)
	(split-window-right)
	(balance-windows)
	(other-window 1))
 (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src
**** turn yes-or-no questions into y or no
#+begin_src emacs-lisp :tangle no
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
**** defer load most packages for quick startup
#+begin_src emacs-lisp :tangle no
(setq use-package!-always-defer t)
#+end_src
*** delete trailing whitespace
#+begin_src emacs-lisp :tangle no
(add-hook! 'after-save-hook #'delete-trailing-whitespace)
;; or
;; (add-hook! 'after-save-hook #'whitespace-cleanup)
#+end_src
unneeded since we use ws-butler which:
+ only on modified lines
+ replaces trailing whitespace with virtual whitespace
*** delete spaces, tabs, newline
#+begin_src emacs-lisp :tangle yes
(setq backward-delete-char-untabify-method 'all)
#+end_src

+ all - all whitespace - tabs, spaces, \n
+ hungry - all whitespace - tabs, spaces
+ untabify - turn a tab into many spaces, then delete one space at a time
 
*** default workspace behaviour fix
#+begin_src emacs-lisp :tangle no
(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override
   `(+workspace-current-name))
)
#+end_src
**** TODO see if its fixed/works
** Henrik lissner tech
#+begin_src emacs-lisp :tangle no
;; Prevents some cases of Emacs flickering.
(add-to-list 'default-frame-alist '(inhibit-double-buffering . t))
#+end_src
** dashboard
#+begin_src emacs-lisp :tangle yes
;;; :ui doom-dashboard
(setq fancy-splash-image (file-name-concat doom-user-dir "gorl.jpg"))
;; Hide the menu for as minimalistic a startup screen as possible.
(setq +doom-dashboard-functions '(doom-dashboard-widget-banner))
#+end_src
* Packages
** dired
#+begin_src emacs-lisp :tangle no
(use-package! dired-open
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))

(use-package! peep-dired
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
)
#+end_src
** corfu
not sure if after! init works lul

#+begin_src elisp :tangle yes
(use-package! corfu
  ;; :config
  :custom
  (tabs-always-indent 'complete)
  (tabs-first-completion 'word-or-paren-or-punct)
  (corfu-auto nil))
#+end_src

  ;; (text-mode-ispell-word-completion nil)
    ;; Hide commands in M-x which do not apply to the current mode.  Corfu
  ;; commands are hidden, since they are not used via M-x. This setting is
  ;; useful beyond Corfu.
  ;; (read-extended-command-predicate #'command-completion-default-include-p)

=tabs-always-indent=
Enable indentation+completion using the TAB key.
`completion-at-point' is often bound to M-TAB.
(setq tab-always-indent 'complete) ; try complete if indent is off

- If t, hitting TAB always just indents the current line.
- If nil, hitting TAB indents the current line if point is at the left margin
 or in the line's indentation, otherwise it inserts a "real" TAB character.
- If complete, TAB first tries to indent the current line, and if the line
was already indented, then try to complete the thing at point.

Also see =tab-first-completion.=

Some programming language modes have their own variable to control this,
e.g., c-tab-always-indent, and do not respect this variable.
** spelling
https://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html
*** ispell
Dictionary is set by ispell-dictionary variable. Can be changed locally with the function ispell-change-dictionary.

#+begin_src emacs-lisp :tangle no
;; (setq ispell-program-name "hunspell")
(setq ispell-dictionary "en_US")
;; Or, for local dictionary settings:
(setq ispell-local-dictionary "en_US")
#+end_src

*** spell-fu
#+begin_src emacs-lisp :tangle yes
(after! spell-fu
  (setq spell-fu-idle-delay 0.5))  ; default is 0.25
#+end_src

=Exclude faces=
#+begin_src emacs-lisp :tangle no
(setf (alist-get 'markdown-mode +spell-excluded-faces-alist)
      '(markdown-code-face
	markdown-reference-face
	markdown-link-face
	markdown-url-face
	markdown-markup-face
	markdown-html-attr-value-face
	markdown-html-attr-name-face
	markdown-html-tag-name-face))
#+end_src

** Async
#+begin_src emacs-lisp :tangle no
(use-package! async
  :ensure nil
  :init
  (dired-async-mode 1)) ;Do dired actions asynchronously.
#+end_src

** company
#+begin_src elisp :tangle no
;; (after! company
(use-package! company
  ;; :after lsp-mode
  ;; :hook
  ;; (lsp-mode . company-mode)
  ;; (evil-normal-state-entry #'company-abort )
  ;; (after-init 'global-company-mode)
  :defer t
  :custom
  (company-idle-delay (lambda () (if (company-in-string-or-comment) nil 0.3))) ; delay in seconds 0.3;;
  ;; (company-idle-delay 0.0)
  (company-minimum-prefix-length 2)
  (company-selection-wrap-around t)
  (company-show-numbers t)
  (company-require-match 'never) ; dont need to pick a choice
  (company-tooltip-limit 6)
  :bind
  (:map company-active-map
        ;; ("<tab>" . company-complete-selection)
        ;; ("<tab>" . company-select-next-or-abort)
        ;; ("<tab>" . company-select-next)
        ;; ("backtab" . company-select-previous)
        ("RET" . company-complete-selection)
        ("<escape>" . company-abort)))
#+end_src

Company is a text and code completion framework for Emacs. The name stands for "complete anything".

It uses pluggable back-ends and front-ends to retrieve and display completion candidates.

It comes with several back-ends such as Clang, Ispell, CMake, BBDB, Yasnippet, Dabbrev, Etags, Gtags, Files, Keywords and others.
And the CAPF back-end provides a bridge to the standard completion-at-point-functions facility, and thus works with any major mode that uses the common protocol.

To see or change the list of enabled back-ends, type M-x =customize-variable= RET company-backends. Also see its description for information on writing a back-end.

Once installed, enable company-mode with M-x =company-mode=.

usage:
|-----------------------+------------------------------------------------------|
| =C-n / C-p=             | up / down                                            |
| =C-s C-r C-o=           | search through completions                           |
| =M-<digit>=             | quickly complete with one of the first 10 candidates |
| =M-x: company-complete= | to initiate completion manually                      |
|-----------------------+------------------------------------------------------|
source:[[http://company-mode.github.io/manual/Getting-Started.html#Commands-1]]

** centaur tabs
#+begin_src elisp :tangle yes
(use-package! centaur-tabs
  :defer t
  ;; :demand ; for when you need it immediately
  ;; :init
  ;; (setq centaur-tabs-mode nil)
  ;; (centaur-tabs-change-fonts "arial" 112)
  ;; (centaur-tabs-headline-match) ; FIXME does not work causes error
  ;; (require 'projectile)
  ;; (centaur-tabs-group-by-projectile-project) ; group tabs by projectile
  :config
  (setq centaur-tabs-set-bar 'nil ; left, over, under
        centaur-tabs-style 'bar ;alternate, bar, box(x), wave, zigzag, chamfer FIXME...slant does not work
        centaur-tabs-icon-type 'all-the-icons ; or nerd-icons
        centaur-tabs-set-icons t
        ;; centaur-tabs-close-button "X"
        ;; centaur-tabs-modified-marker "•" - Also
        ;; centaur-tabs-set-close-button nil
        ;; centaur-tabs-plain-icons t ; for same color as text
        ;; centaur-tabs-show-navigation-buttons t
        centaur-tabs-gray-out-icons 'buffer
        centaur-tabs-cycle-scope 'tabs ; default::, tabs , groups
        centaur-tabs-height 15)
  :hook ((nix-mode  . centaur-tabs-mode)
         (python-mode  . centaur-tabs-mode)
         (pdf-view-mode . centaur-tabs-local-mode)
         (org-mode . centaur-tabs-local-mode)) ; no centaur tabs on org documents
  :bind
  (:map evil-normal-state-map
        ("g t" . centaur-tabs-forward)
        ("g T" . centaur-tabs-backward)))
#+end_src

  there are two faces to customize the close button string: centaur-tabs-modified-marker-unselected and centaur-tabs-modified-marker-selected


=Projectile integration=
You can group your tabs by Projectile’s project. Just use the following function in your configuration:

~(centaur-tabs-group-by-projectile-project)~
This function can be called interactively to enable Projectile grouping. To go back to centaur-tabs’s user defined (or default) buffer grouping function you can interactively call:

~(centaur-tabs-group-buffer-groups)~

You can make the headline face match the centaur-tabs-default face. This makes the tabbar have an uniform appearance. In your configuration use the following function:
~(centaur-tabs-headline-match)~

see also:
+ https://github.com/ema2159/centaur-tabs?tab=readme-ov-file#buffer-groups
+ https://github.com/ema2159/centaur-tabs?tab=readme-ov-file#tab-styles

** org-auto-tangle
#+begin_src emacs-lisp :tangle yes
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  ;; :hook (org-src-mode . org-auto-tangle-mode)
  :config
  ;; (setq org-auto-tangle-default t) ; set auto_tangle: nil for buffers not to auto tangle
  (setq org-auto-tangle-babel-safelist '("~/system.org" "~/test.org")))
#+end_src

[[github:yilkalargaw/org-auto-tangle]]

** highlight TODO
#+begin_src emacs-lisp :tangle yes
(use-package! hl-todo
  :hook (org-mode . hl-todo-mode)
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces `(("TODO"       warning bold)
                                ("FIXME"      error bold)
                                ("NEVERDO"    warning bold)
                                ("HACK"       font-lock-constant-face bold)
                                ("REVIEW"     font-lock-keyword-face bold)
                                ("NOTE"       success bold)
                                ("DEPRECATED" font-lock-doc-face bold))))
#+end_src
** all the icons
#+begin_src elisp :tangle yes
(use-package! all-the-icons
  :if (display-graphic-p))
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package! all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src
** old | phased out
*** ultra-scroll
#+begin_src emacs-lisp :tangle no
(use-package! ultra-scroll
  ;:load-path "~/code/emacs/ultra-scroll" ; if you git clone'd instead of package-vc-install
  :config
  (ultra-scroll-mode 1)
  :recipe (:host github :repo "https://github.com/jdtsmith/ultra-scroll"))
#+end_src

Do you need this?

If you don't scroll with a high-speed device (modern mouse or track-pad), no. If you do, but aren't sure, here's a good test to try:

Open a heavy emacs buffer full screen on your largest monitor.
While scrolling smoothly such that lines would move across your window's full height in about 5 seconds, can you easily read the text you see, without stopping, in both directions? Now, try this exercise again with your browser – I bet it's very readable there.
Shouldn't emacs be like this?

If you scroll buffers with tall images visible, this is also a good reason to give ultra-scroll a try.

*** obsidian
#+begin_src emacs-lisp :tangle no
(setq obsidian-directory "~/OBSIDIAN")
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package! obsidian
  :config
  (global-obsidian-mode t)
  (obsidian-backlinks-mode t)
  :custom
  ;; location of obsidian vault
  (obsidian-directory "~/OBSIDIAN")
  ;; Default location for new notes from `obsidian-capture'
  (obsidian-inbox-directory "Inbox")
  ;; Useful if you're going to be using wiki links
  (markdown-enable-wiki-links t)

  ;; These bindings are only suggestions; it's okay to use other bindings
  :bind (:map obsidian-mode-map
              ;; Create note
              ("C-c C-n" . obsidian-capture)
              ;; If you prefer you can use `obsidian-insert-wikilink'
              ("C-c C-l" . obsidian-insert-link)
              ;; Open file pointed to by link at point
              ("C-c C-o" . obsidian-follow-link-at-point)
              ;; Open a different note from vault
              ("C-c C-p" . obsidian-jump)
              ;; Follow a backlink for the current file
              ("C-c C-b" . obsidian-backlink-jump)))
#+end_src

*** FIXME git time machine
#+begin_src emacs-lisp :tangle no
(use-package! git-timemachine
  :after git-timemachine
  :hook (evil-normalize-keymaps . git-timemachine-hook)
  :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)
)
#+end_src

*** FIXME Dashboard
#+begin_src emacs-lisp :tangle no
(use-package! dashboard
  :ensure nil
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Glorious lisp interpreter")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-startup-banner "~/Shibuya/assets/emacs/emacs-dash.png")  ;; use custom image as banner
  (setq dashboard-center-content t) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)))
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
				      (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))
#+end_src

* Justin-VC tech :justin:
** dashboard / misc
#+begin_src emacs-lisp :tangle no
(defun +doom-dashboard-setup-modified-keymap ()
  (setq +doom-dashboard-mode-map (make-sparse-keymap))
  (map! :map +doom-dashboard-mode-map
        :desc "Find file" :ne "f" #'find-file
        :desc "Recent files" :ne "r" #'consult-recent-file
        :desc "Config dir" :ne "C" #'doom/open-private-config
        :desc "Open config.org" :ne "c" (cmd! (find-file (expand-file-name "config.org" doom-private-dir)))
        :desc "Notes (roam)" :ne "n" #'org-roam-node-find
        :desc "Search (roam)" :ne "N" #'justin/org-roam-rg-search
        :desc "Switch buffer" :ne "b" #'+vertico/switch-workspace-buffer
        :desc "Switch buffers (all)" :ne "B" #'consult-buffer
        :desc "IBuffer" :ne "i" #'ibuffer
        :desc "Agenda"  :ne "o" #'org-agenda
        :desc "Previous buffer" :ne "p" #'previous-buffer
        :desc "Set theme" :ne "t" #'consult-theme
        :desc "Quit" :ne "Q" #'save-buffers-kill-terminal
        :desc "Show keybindings" :ne "h" (cmd! (which-key-show-keymap '+doom-dashboard-mode-map))))

(add-transient-hook! #'+doom-dashboard-mode (+doom-dashboard-setup-modified-keymap))
(add-transient-hook! #'+doom-dashboard-mode :append (+doom-dashboard-setup-modified-keymap))
(add-hook! 'doom-init-ui-hook :append (+doom-dashboard-setup-modified-keymap))
#+end_src

#+begin_src emacs-lisp :tangle yes
(map! :leader :desc "Dashboard" "d" #'+doom-dashboard/open)
#+end_src

#+begin_src emacs-lisp :tangle no
(map! :n [mouse-8] #'better-jumper-jump-backward
      :n [mouse-9] #'better-jumper-jump-forward)
#+end_src

** splash images
#+begin_src emacs-lisp :tangle no
(use-package random-splash-image
  :config
  (setq random-splash-image-dir (concat (getenv "HOME") "/.doom.d/misc/splash-images"))
  (unless (file-directory-p random-splash-image-dir)
  (make-directory random-splash-image-dir t))
  (random-splash-image-set))
#+end_src
** eval better eros
#+begin_src emacs-lisp :tangle yes
(setq eros-eval-result-prefix "⟹ ") ; default =>
#+end_src
** GPT things
#+begin_src emacs-lisp :tangle no
(use-package! gptel
  :config
  (setq gptel-model "llama3:latest"
        gptel-org-branching-context t)

  (setq gptel-backend
        (gptel-make-ollama "Ollama"
                           :host "192.168.1.9:11434"
                           :stream t
                           :models '("llama3:latest"))))

(use-package! gptel-quick
  :after gptel
  :config
  ;; Add any gptel-quick specific configuration here
  )

;; Key bindings
(map! :leader
      (:prefix ("l" . "LLM")
       :desc "Quick GPTel" "q" #'gptel-quick
       :desc "Start GPTel" "s" #'gptel
       :desc "Send to GPTel" "S" #'gptel-send))
#+end_src
** Emojify
#+begin_src emacs-lisp :tangle no
(customize-set-variable 'emojify-emoji-set "twemoji-v2")
#+end_src

+ "emojione-v2.2.6-22"
** maginalia changes
#+begin_src emacs-lisp :tangle yes
(after! marginalia
  (setq marginalia-censor-variables nil)

  (defadvice! +marginalia--anotate-local-file-colorful (cand)
    "Just a more colourful version of `marginalia--anotate-local-file'."
    :override #'marginalia--annotate-local-file
    (when-let (attrs (file-attributes (substitute-in-file-name
                                       (marginalia--full-candidate cand))
                                      'integer))
      (marginalia--fields
       ((marginalia--file-owner attrs)
        :width 12 :face 'marginalia-file-owner)
       ((marginalia--file-modes attrs))
       ((+marginalia-file-size-colorful (file-attribute-size attrs))
        :width 7)
       ((+marginalia--time-colorful (file-attribute-modification-time attrs))
        :width 12))))

  (defun +marginalia--time-colorful (time)
    (let* ((seconds (float-time (time-subtract (current-time) time)))
           (color (doom-blend
                   (face-attribute 'marginalia-date :foreground nil t)
                   (face-attribute 'marginalia-documentation :foreground nil t)
                   (/ 1.0 (log (+ 3 (/ (+ 1 seconds) 345600.0)))))))
      ;; 1 - log(3 + 1/(days + 1)) % grey
      (propertize (marginalia--time time) 'face (list :foreground color))))

  (defun +marginalia-file-size-colorful (size)
    (let* ((size-index (/ (log10 (+ 1 size)) 7.0))
           (color (if (< size-index 10000000) ; 10m
                      (doom-blend 'orange 'green size-index)
                    (doom-blend 'red 'orange (- size-index 1)))))
      (propertize (file-size-human-readable size) 'face (list :foreground color)))))
#+end_src
** weather
#+begin_src emacs-lisp :tangle no
(use-package! wttrin
  :commands wttrin
  :config
  wttrin-default-cities '("Nairobi" ))
#+end_src
** elcord
#+begin_src emacs-lisp :tangle yes
(use-package! elcord
  :commands elcord-mode
  :config
  (setq elcord-use-major-mode-as-main-icon t))
#+end_src
** FIXME org-modern
#+begin_src emacs-lisp :tangle no
(use-package! org-modern
  :hook (org-mode . org-modern-mode)
  :config
  (setq org-modern-star ["◉" "○" "✸" "✿" "✤" "✜" "◆" "▶"]
        org-modern-table-vertical 1
        org-modern-table-horizontal 0.2
        org-modern-list '((43 . "➤")
                          (45 . "–")
                          (42 . "•"))
        org-modern-todo-faces
        '(("TODO" :inverse-video t :inherit org-todo)
          ("PROJ" :inverse-video t :inherit +org-todo-project)
          ("STRT" :inverse-video t :inherit +org-todo-active)
          ("[-]"  :inverse-video t :inherit +org-todo-active)
          ("HOLD" :inverse-video t :inherit +org-todo-onhold)
          ("WAIT" :inverse-video t :inherit +org-todo-onhold)
          ("[?]"  :inverse-video t :inherit +org-todo-onhold)
          ("KILL" :inverse-video t :inherit +org-todo-cancel)
          ("NO"   :inverse-video t :inherit +org-todo-cancel))
        org-modern-footnote
        (cons nil (cadr org-script-display))
  )
  (custom-set-faces! '(org-modern-statistics :inherit org-checkbox-statistics-todo)))

(setq org-modern-priority t)

(after! spell-fu
  (cl-pushnew 'org-modern-tag (alist-get 'org-mode +spell-excluded-faces-alist)))
#+end_src

* Terminal Modes
** ESHELL
Cannot handle ncurses programs and in certain interpreters (Python, GHCi) selecting previous commands does not work (for now).

I recommend using eshell for light cli work, and using your external terminal emulator of choice for heavier tasks
** FIXME term-mode
#+begin_src elisp :tangle no
(use-package! term
  :ensure nil
  :config
  (setq explicit-shell-file-name "bash")
  ;;(setq explicit-zsh-args '())
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
#+end_src
* ORG
** ORG specific settings

[[https://orgmode.org/orgguide.html#Properties]]

#+begin_src emacs-lisp :tangle yes
(use-package! org
  :init
  (setq org-directory "~/org" ; trailing slash important or use expand-file-name(convert file name to absolute and canonicalize/standardize it)
        ;; org-default-notes-file (concat org-directory "/notes.org")
        org-default-notes-file (expand-file-name  "notes.org" org-directory))
  :hook
  (org-mode . (lambda ()
                ;; (vi-tilde-fringe-mode -1)
                (display-line-numbers-mode -1)
                ;; (spell-fu-mode -1)
                (diff-hl-mode -1)))
  :custom
  ;; (org-fancy-priorities-list '("⚡" "⬆" "⬇" "☕"))
  (org-log-done 'time) ; task done with timestamp
  ;; (org-log-done-with-time nil)
  ;; (org-log-done 'note) ;task done with note prompted to user
  (org-hide-emphasis-markers t)
  (org-tag-alist
      '(;;Places
        ("@home" . ?H)
        ("@school" . ?S)
        ("@babe" . ?B)

        ;;devices
        ("@carthage" . ?C)
        ("@tangier" . ?T)

        ;;activites
        ("@work" . ?W)
        ("@pyrple" . ?P)
        ("@emacs" . ?E)
        ("@nix" . ?N)))
  (org-todo-keywords
      '((sequence "TODO" "WORKING"  "|" "DONE" "CONSIDER"))))
  ;; (org-todo-keywords
  ;;     '((sequence "TODO(t)" "|" "DONE(d)")
  ;;       (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")))

#+end_src

*** experiments
**** zaiste
#+begin_src emacs-lisp :tangle no
(after! org
  (set-face-attribute 'org-link nil
                      :weight 'normal
                      :background nil)
  (set-face-attribute 'org-code nil
                      :foreground "#a9a1e1"
                      :background nil)
  (set-face-attribute 'org-date nil
                      :foreground "#5B6268"
                      :background nil)
  (set-face-attribute 'org-level-1 nil
                      :foreground "steelblue2"
                      :background nil
                      :height 1.2
                      :weight 'normal)
  (set-face-attribute 'org-level-2 nil
                      :foreground "slategray2"
                      :background nil
                      :height 1.0
                      :weight 'normal)
  (set-face-attribute 'org-level-3 nil
                      :foreground "SkyBlue2"
                      :background nil
                      :height 1.0
                      :weight 'normal)
  (set-face-attribute 'org-level-4 nil
                      :foreground "DodgerBlue2"
                      :background nil
                      :height 1.0
                      :weight 'normal)
  (set-face-attribute 'org-level-5 nil
                      :weight 'normal)
  (set-face-attribute 'org-level-6 nil
                      :weight 'normal)
  (set-face-attribute 'org-document-title nil
                      :foreground "SlateGray1"
                      :background nil
                      :height 1.75
                      :weight 'bold)
#+end_src

**** FIXME Preserve Indentation On Org-Babel-Tangle
#+begin_src emacs-lisp :tangle no
(setq org-src-preserve-indentation t)
#+end_src
**** bullets mode
#+begin_src emacs-lisp :tangle no
(setq org-bullets-bullet-list '("●" "❀" "◆" "◇" "◖" "☆" "☯" " "))
(add-hook! 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

#TODO TEST FURTHER
#FIXME not working so far
icons:     large: "◉" "○" "✸" "✿" ;; ♥ ● ◇ ✚ ✜ ☯ ◆ ♠ ♣ ♦ ☢ ❀ ◆ ◖ ▶ |  Small :: ► • ★ ▸

org-bullets-face-name

** org-roam
#+begin_src emacs-lisp :tangle yes
;; (setq org-roam-directory (file-truename "~/org/roam"))
(setq org-roam-directory (file-truename "~/org/roam")
      org-roam-db-location (file-name-concat org-roam-directory ".org-roam.db")
      org-roam-dailies-directory "journal/") ;
  ;; :custom
  ;; (org-roam-completion-everywhere t) ;default t
  ;; :bind (("C-c n l" . org-roam-buffer-toggle)
  ;;        ("C-c n f" . org-roam-node-find)
  ;;        ("C-c n i" . org-roam-node-insert)
  ;;        ("C-c n c" . org-roam-capture)
         ;; Dailies
         ;; ("C-c n j" . org-roam-dailies-capture-today))
  ;; :config
  ;; (org-roam-db-autosync-enable))
#+end_src
** org-capture
Capture lets you quickly store notes with no workflow interruption
*** my org-capture-template

#+begin_src emacs-lisp :tangle yes
(use-package! org-capture
  :bind ("C-c c" . org-capture)
  :custom
  ;; (require 'prot-org)
  (org-capture-templates '(
          ("e" "EMACs" plain
           (file+headline "EmacsTODO.org" "TONEVERDO list - emacs [/]")
           "+ [ ] %?")

          ("n" "nixOs" plain
           (file+headline "nixTODO.org" "TONEVERDO nixOs [/]")
           "+ [ ] %?")

          ("b" "Bucket List [ movies books ]") ; group 'em up
          ("bm" "movies" plain
           (file+headline "bucket-list.org" "Movies")
           "+ [ ] %?")
          ("bb" "books" plain
           (file+headline "bucket-list.org" "Books")
           "+ [ ] %?")

          ("d" "Life's Morsels")
          ("dw" "words [w]" plain
           (file+headline "diction.org" "Words") ;TODO see if this can support yassnippets
           "\n\n %?"
           :empty-lines 1
           :prepend t)
          ("di" "idioms [i]" plain
           (file+headline "diction.org" "Idioms")
           "+ %?"
           :empty-lines 1
           :prepend t)
          ("dq" "quotes [q]" plain
           (file+headline "diction.org" "Quotes")
           " %?"
           :empty-lines 1
           :prepend t)
          ("dp" "phrases [p]" plain
           (file+headline "diction.org" "Phrases")
           "+ %?"
           :empty-lines 1
           :prepend t))))
#+end_src

**** old template
#+begin_src elisp
;; ("d" "Demo Template" entry
;;   (file+headline "demo.org" "Our first heading");relative to ~/org DIR
;;   "* DEMO TEXT %?")

;; ("o" "Options in prompt" entry
;;  (file+headline "demo.org" "Our second heading")
;;  "* %^{Select your option|ONE|TWO|THREE} %?")

;;; capture region and insert into template ;; attach current time
;; ("t" "Task with a date" entry
;;  (file+headline "demo.org" "Scheduled tasks")
;;  "* %^{Select your option|ONE|TWO|THREE}\n SCHEDULED: %t\n %i %?")

;; ("p" "Prompt for input: " entry
;;     (file+headline "demo.org" "Our first +heading")
;;     "* %^ %?")

;; ("a" "A random template") ; group 'em up
;;     ("at" "submenu - option [t]" entry
;;      (file+headline "demo.org" "Scheduled tasks")
;;      "* %^{Select your option|ONE|TWO|THREE}\n SCHEDULED: %t\n %i %?")
#+end_src
**** docs
source: https://orgmode.org/manual/Template-elements.html

=keys=
characters only  eg. 'a' or 'ab'
=type=
|------------+--------------------------------------------------------------------|
| entry      | text with heading                                                  |
| item       | plain list item, placed in the first plain list at target location |
| checkitem  | checkbox item                                                      |
| table-line | A new line in the first table at the target location. see more     |
| plain      | text inserted as i                                                 |
|------------+--------------------------------------------------------------------|
*** shortcurts
|----------------------+-----------------+----------------------------------------------------------------------------|
| command              | keymap          | does                                                                       |
|----------------------+-----------------+----------------------------------------------------------------------------|
| org-capture          | =M-x org-capture= | start capture process, placing you into a narrowed indirect buffer to edit |
| org-capture-finalize | =C-c C-c=         |                                                                            |
| org-capture-refile   | =C-c C-w=         | Finalize the capture process by refiling the note to a different place     |
| org-capture-kill     | =C-c C-k=         | Abort the capture process and return to the previous state.                |
|----------------------+-----------------+----------------------------------------------------------------------------|
*** org-roam-capture-template :hils:
#+begin_src emacs-lisp :tangle no
(after! org-roam
  (setq org-roam-capture-templates
        `(("n" "note" plain
           ,(format "#+title: ${title}\n%%[%s/template/note.org]" org-roam-directory)
           :target (file "note/%<%Y%m%d%H%M%S>-${slug}.org")
           :unnarrowed t)
          ("r" "thought" plain
           ,(format "#+title: ${title}\n%%[%s/template/thought.org]" org-roam-directory)
           :target (file "thought/%<%Y%m%d%H%M%S>-${slug}.org")
           :unnarrowed t)
          ("t" "topic" plain
           ,(format "#+title: ${title}\n%%[%s/template/topic.org]" org-roam-directory)
           :target (file "topic/%<%Y%m%d%H%M%S>-${slug}.org")
           :unnarrowed t)
          ("c" "contact" plain
           ,(format "#+title: ${title}\n%%[%s/template/contact.org]" org-roam-directory)
           :target (file "contact/%<%Y%m%d%H%M%S>-${slug}.org")
           :unnarrowed t)
          ("p" "project" plain
           ,(format "#+title: ${title}\n%%[%s/template/project.org]" org-roam-directory)
           :target (file "project/%<%Y%m%d>-${slug}.org")
           :unnarrowed t)
          ("i" "invoice" plain
           ,(format "#+title: %%<%%Y%%m%%d>-${title}\n%%[%s/template/invoice.org]" org-roam-directory)
           :target (file "invoice/%<%Y%m%d>-${slug}.org")
           :unnarrowed t)
          ("f" "ref" plain
           ,(format "#+title: ${title}\n%%[%s/template/ref.org]" org-roam-directory)
           :target (file "ref/%<%Y%m%d%H%M%S>-${slug}.org")
           :unnarrowed t)
          ("w" "works" plain
           ,(format "#+title: ${title}\n%%[%s/template/works.org]" org-roam-directory)
           :target (file "works/%<%Y%m%d%H%M%S>-${slug}.org")
           :unnarrowed t)
          ("s" "secret" plain "#+title: ${title}\n\n"
           :target (file "secret/%<%Y%m%d%H%M%S>-${slug}.org.gpg")
           :unnarrowed t))
        ;; Use human readable dates for dailies titles
        org-roam-dailies-capture-templates
        `(("d" "default" plain ""
           :target (file+head "%<%Y-%m-%d>.org" ,(format "%%[%s/template/journal.org]" org-roam-directory))))))
#+end_src
*** escape codes
|------------------+-----------------------------------------------------------|
| special =%= escape | does                                                      |
|------------------+-----------------------------------------------------------|
| =%a=               | annotation, normally the link created with org-store-link |
| =%i=               | with active region selected, insert it at point           |
| =%t=  =%T=           | timestamp, date only, or date and time                    |
| =%^t=              | prompt for timestamp                                      |
| =%u=  =%U=           | like above, but inactive timestamps                       |
| =%?=               | after completing the template, position point here        |
| =%^=               | input/prompt                                              |
|------------------+-----------------------------------------------------------|
**** time management
dont have to select manually you can:
+ relative time +3d

*** inspo
**** howardism

org capture template consists of 3 parts:
+ a key binding
+ a destination, (a file, and some section in that file, like a heading, list item etc)
+ a formatting template

source:[[https://howardism.org/Technical/Emacs/capturing-intro.html][Org capturing intro Howardism]]

**** prot tech :prot:
#+begin_src elisp :tangle no
(use-package! org-capture
  :ensure nil
  :bind ("C-c c" . org-capture)
  :config
  ;; (require 'prot-org)

  (setq org-capture-templates
        `(("u" "Unprocessed" entry
           (file+headline "tasks.org" "Unprocessed")
           ,(concat "* %^{Title}\n"
                    ":PROPERTIES:\n"
                    ":CAPTURED: %U\n"
                    ":CUSTOM_ID: h:%(format-time-string \"%Y%m%dT%H%M%S\")\n"
                    ":END:\n\n"
                    "%a\n%i%?")
           :empty-lines-after 1)
          ("w" "Wishlist" entry
           (file+olp "tasks.org" "All tasks" "Wishlist")
           ,(concat "* %^{Title} %^g\n"
                    ":PROPERTIES:\n"
                    ":CAPTURED: %U\n"
                    ":CUSTOM_ID: h:%(format-time-string \"%Y%m%dT%H%M%S\")\n"
                    ":END:\n\n"
                    "%a\n%?")
           :empty-lines-after 1)
          ("t" "Task to do" entry
           (file+headline "tasks.org" "All tasks")
           ,(concat "* TODO %^{Title} %^g\n"
                    ":PROPERTIES:\n"
                    ":CAPTURED: %U\n"
                    ":CUSTOM_ID: h:%(format-time-string \"%Y%m%dT%H%M%S\")\n"
                    ":END:\n\n"
                    "%a\n%?")
           :empty-lines-after 1)
          ("s" "Select file and heading to add to" entry
           (function prot-org-select-heading-in-file)
           ,(concat "* TODO %^{Title}%?\n"
                    ":PROPERTIES:\n"
                    ":CAPTURED: %U\n"
                    ":CUSTOM_ID: h:%(format-time-string \"%Y%m%dT%H%M%S\")\n"
                    ":END:\n\n")
           :empty-lines-after 1)

          ;; NOTE 2024-11-24: I am not using this, but am keeping it
          ;; here because the approach is good.

          ;; ("c" "Clock in and do immediately" entry
          ;;  (file+headline "tasks.org" "Clocked tasks")
          ;;  ,(concat "* TODO %^{Title}\n"
          ;;           ":PROPERTIES:\n"
          ;;           ":EFFORT: %^{Effort estimate in minutes|5|10|15|30|45|60|90|120}\n"
          ;;           ":END:\n\n"
          ;;           "%a\n")
          ;;  :prepend t
          ;;  :clock-in t
          ;;  :clock-keep t
          ;;  :immediate-finish t
          ;;  :empty-lines-after 1)
          ("p" "Private lesson or service" entry
           (file "coach.org")
           #'prot-org-capture-coach
           :prepend t
           :empty-lines 1)
          ("P" "Private service clocked" entry
           (file+headline "coach.org" "Clocked services")
           #'prot-org-capture-coach-clock
           :prepend t
           :clock-in t
           :clock-keep t
           :immediate-finish t
           :empty-lines 1)))

  ;; NOTE 2024-11-10: I realised that I was not using this enough, so
  ;; I decided to simplify my setup.  Keeping it here, in case I need
  ;; it again.

  ;; (setq org-capture-templates-contexts
  ;;       '(("e" ((in-mode . "notmuch-search-mode")
  ;;               (in-mode . "notmuch-show-mode")
  ;;               (in-mode . "notmuch-tree-mode")))))
  )
#+end_src
**** templates
***** thoughtbot guy
#+begin_src emacs-lisp :tangle no
(setq org-capture-templates
      `(("t"    ;hotkey
         "Todo list item"  ; name
         entry ;type
         ;heading type and title
         (file+headline org-default-notes-file "Tasks")
         "* TODO %?\n %i\n %a" ;template
         )))
#+end_src

***** source?? - nice stuff
# default location for capture mode?
#+begin_src emacs-lisp :tangle no
(setq org-agenda-files (list "inbox.org"))
#+end_src
then we can setup a specific capture template for inbox:

#+begin_src emacs-lisp :tangle no
(setq org-capture-templates
       `(("i" "Inbox" entry  (file "inbox.org")
        ,(concat "* TODO %?\n"
                 "/Entered on/ %U"))))
#+end_src
***** capture templates :prot:
more: manual

You can use templates for different types of capture items, and for different target locations. Say you would like to use one template to create general TODO entries, and you want to put these entries under the heading ‘Tasks’ in your file ‘~/org/gtd.org’. Also, a date tree in the file ‘journal.org’ should capture journal entries. A possible configuration would look like:

If you then press =t= from the capture menu, Org will prepare the template for you like this:

#+begin_src emacs-lisp :tangle no
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
         "* TODO %?\n  %i\n  %a")
        ("j" "Journal" entry (file+datetree "~/org/journal.org")
         "* %?\nEntered on %U\n  %i\n  %a")))
#+end_src



[[https://www.labri.fr/perso/nrougier/GTD/index.html][very nice tutorials]]
** org-agenda

(key desc type match settings files)

Doom Emacs sets (org-agenda-start-day "-3d").

*** pro tech - my agenda :prot:
#+begin_src emacs-lisp :tangle yes
(load! "maluware-org-agenda") ; imports maluware-orgAgenda.el

(setq org-agenda-custom-commands
      `(
        ("D" "Today's view"
         ((todo "WAIT"
                ((org-agenda-overriding-header "Tasks on hold\n")))
         (agenda ""
                 ((org-agenda-block-separator nil) ;"*"
                  (org-agenda-span 1) ;7:: how many days should it span
                  (org-deadline-warning-days 0) ; remove warnings for events not for today
                  ;; (org-agenda-day-face-function (lambda (date) 'org-agenda-date)) ; remove underline on todays date
                  ;; (org-agenda-format-date "%A %-e %B %Y") ;modify date
                  ;; (org-agenda-fontify-priorities nil)
                  (org-agenda-start-day nil)
                  (org-agenda-overriding-header "\nDaily agenda view\n")))
         ))
        ("P" "Protesilaos"
         ,maluware-custom-org-daily-agenda)
        ))
#+end_src
*** external variable files
For neater/shorter presentation
**** defvar maluware-org-custom-daily-agenda
#+begin_src emacs-lisp :tangle maluware-org-agenda.el
(defvar maluware-custom-org-daily-agenda
  `((tags-todo "*"
     ((org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp)))
      (org-agenda-skip-function
       `(org-agenda-skip-entry-if
         'notregexp ,(format "\\[#%s\\]" (char-to-string org-priority-highest))))
      (org-agenda-block-separator nil)
      (org-agenda-overriding-header "Important tasks without a date\n")))
    (agenda "" ((org-agenda-span 1)
                (org-deadline-warning-days 0)
                (org-agenda-block-separator nil)
                (org-scheduled-past-days 0)
                ;; We don't need the `org-agenda-date-today'
                ;; highlight because that only has a practical
                ;; utility in multi-day views.
                (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
                (org-agenda-format-date "%A %-e %B %Y")
                (org-agenda-overriding-header "\nToday's agenda\n")))
    (agenda "" ((org-agenda-start-on-weekday nil)
                (org-agenda-start-day "+1d")
                (org-agenda-span 3)
                (org-deadline-warning-days 0)
                (org-agenda-block-separator nil)
                (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                (org-agenda-overriding-header "\nNext three days\n")))
    (agenda "" ((org-agenda-time-grid nil)
                (org-agenda-start-on-weekday nil)
                ;; We don't want to replicate the previous section's
                ;; three days, so we start counting from the day after.
                (org-agenda-start-day "+4d")
                (org-agenda-span 14)
                (org-agenda-show-all-dates nil)
                (org-deadline-warning-days 0)
                (org-agenda-block-separator nil)
                (org-agenda-entry-types '(:deadline))
                (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                (org-agenda-overriding-header "\nUpcoming deadlines (+14d)\n"))))
  "Custom agenda for use in `org-agenda-custom-commands'.")
#+end_src

***** org-agenda-custom-commands
#+begin_src emacs-lisp :tangle no
(setq org-agenda-custom-commands
      `(("A" "Daily agenda and top priority tasks"
         ((tags-todo "*"
                     ((org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp)))
                      (org-agenda-skip-function
                       `(org-agenda-skip-entry-if
                         'notregexp ,(format "\\[#%s\\]" (char-to-string org-priority-highest))))
                      (org-agenda-block-separator nil)
                      (org-agenda-overriding-header "Important tasks without a date\n")))
          (agenda "" ((org-agenda-span 1)
                      (org-deadline-warning-days 0)
                      (org-agenda-block-separator nil)
                      (org-scheduled-past-days 0)
                      ;; We don't need the `org-agenda-date-today'
                      ;; highlight because that only has a practical
                      ;; utility in multi-day views.
                      (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
                      (org-agenda-format-date "%A %-e %B %Y")
                      (org-agenda-overriding-header "\nToday's agenda\n")))
          (agenda "" ((org-agenda-start-on-weekday nil)
                      (org-agenda-start-day "+1d")
                      (org-agenda-span 3)
                      (org-deadline-warning-days 0)
                      (org-agenda-block-separator nil)
                      (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                      (org-agenda-overriding-header "\nNext three days\n")))
          (agenda "" ((org-agenda-time-grid nil)
                      (org-agenda-start-on-weekday nil)
                      ;; We don't want to replicate the previous section's
                      ;; three days, so we start counting from the day after.
                      (org-agenda-start-day "+4d")
                      (org-agenda-span 14)
                      (org-agenda-show-all-dates nil)
                      (org-deadline-warning-days 0)
                      (org-agenda-block-separator nil)
                      (org-agenda-entry-types '(:deadline))
                      (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                      (org-agenda-overriding-header "\nUpcoming deadlines (+14d)\n")))))
        ("P" "Plain text daily agenda and top priorities"
         ((tags-todo "*"
                     ((org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp)))
                      (org-agenda-skip-function
                       `(org-agenda-skip-entry-if
                         'notregexp ,(format "\\[#%s\\]" (char-to-string org-priority-highest))))
                      (org-agenda-block-separator nil)
                      (org-agenda-overriding-header "Important tasks without a date\n")))
          (agenda "" ((org-agenda-span 1)
                      (org-deadline-warning-days 0)
                      (org-agenda-block-separator nil)
                      (org-scheduled-past-days 0)
                      ;; We don't need the `org-agenda-date-today'
                      ;; highlight because that only has a practical
                      ;; utility in multi-day views.
                      (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
                      (org-agenda-format-date "%A %-e %B %Y")
                      (org-agenda-overriding-header "\nToday's agenda\n")))
          (agenda "" ((org-agenda-start-on-weekday nil)
                      (org-agenda-start-day "+1d")
                      (org-agenda-span 3)
                      (org-deadline-warning-days 0)
                      (org-agenda-block-separator nil)
                      (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                      (org-agenda-overriding-header "\nNext three days\n")))
          (agenda "" ((org-agenda-time-grid nil)
                      (org-agenda-start-on-weekday nil)
                      ;; We don't want to replicate the previous section's
                      ;; three days, so we start counting from the day after.
                      (org-agenda-start-day "+4d")
                      (org-agenda-span 14)
                      (org-agenda-show-all-dates nil)
                      (org-deadline-warning-days 0)
                      (org-agenda-block-separator nil)
                      (org-agenda-entry-types '(:deadline))
                      (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                      (org-agenda-overriding-header "\nUpcoming deadlines (+14d)\n"))))
         ((org-agenda-with-colors nil)
          (org-agenda-prefix-format "%t %s")
          (org-agenda-current-time-string ,(car (last org-agenda-time-grid)))
          (org-agenda-fontify-priorities nil)
          (org-agenda-remove-tags t))
         ("agenda.txt"))))
#+end_src

***** org-agenda-custom-commands
#+begin_src emacs-lisp :tangle no
(setq org-agenda-custom-commands
      `(("A" "Daily agenda and top priority tasks"
         ,prot-org-custom-daily-agenda)
        ("P" "Plain text daily agenda and top priorities"
         ,prot-org-custom-daily-agenda
         ((org-agenda-with-colors nil)
          (org-agenda-prefix-format "%t %s")
          (org-agenda-current-time-string ,(car (last org-agenda-time-grid)))
          (org-agenda-fontify-priorities nil)
          (org-agenda-remove-tags t))
         ("agenda.txt"))))
#+end_src
**** experiment custom-org-daily-agenda
#+begin_src emacs-lisp :tangle no
(defvar maluware-custom-org-daily-agenda
         `((tags-todo "*"
            (org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp))))
           (org-agenda-skip-function
            `(org-agenda-skip-entry-if
              'notrege))
           (todo "WAIT"
                ((org-agenda-overriding-header "Tasks on hold\n")))
         (agenda ""
                 ((org-agenda-block-separator nil) ;"*"
                  ;; (org-agenda-span 1) ;7:: how many days should it span
                  ;; (org-deadline-warning-days 0) ;events not for today
                  (org-agenda-day-face-function (lambda (date) 'org-agenda-date)) ; remove underline on todays date
                  ;; (org-agenda-format-date "%A %-e %B %Y") ;modify date
                  ;; (org-agenda-fontify-priorities nil)
                  ;; org-agenda-skip-function
                  (org-agenda-overriding-header "\nDaily agenda\n"))))
  )
#+end_src
*** from manual
#+begin_src emacs-lisp :tangle no
(setq org-agenda-custom-commands
    '(("h" "Agenda and Home-related tasks"
        ((agenda "")
        (tags-todo "home")
        (tags "garden")))
      ("o" "Agenda and Office-related tasks"
        ((agenda "")
        (tags-todo "work")
        (tags "office")))
      ))
#+end_src
*** worg tricks
**** Colorize clocking tasks with a block

[[https://orgmode.org/worg/org-hacks.html][org hacks -worg]]

#+begin_src emacs-lisp :tangle no
;; work with org-agenda dispatcher [c] "Today Clocked Tasks" to view today's clocked tasks.
(defun org-agenda-log-mode-colorize-block ()
  "Set different line spacing based on clock time duration."
  (save-excursion
    (let* ((colors (cl-case (alist-get 'background-mode (frame-parameters))
                                 ('light
                                  (list "#F6B1C3" "#FFFF9D" "#BEEB9F" "#ADD5F7"))
                                 ('dark
                                  (list "#aa557f" "DarkGreen" "DarkSlateGray" "DarkSlateBlue"))))
           pos
           duration)
      (nconc colors colors)
      (goto-char (point-min))
      (while (setq pos (next-single-property-change (point) 'duration))
        (goto-char pos)
        (when (and (not (equal pos (point-at-eol)))
                   (setq duration (org-get-at-bol 'duration)))
          ;; larger duration bar height
          (let ((line-height (if (< duration 15) 1.0 (+ 0.5 (/ duration 30))))
                (ov (make-overlay (point-at-bol) (1+ (point-at-eol)))))
            (overlay-put ov 'face `(:background ,(car colors) :foreground "black"))
            (setq colors (cdr colors))
            (overlay-put ov 'line-height line-height)
            (overlay-put ov 'line-spacing (1- line-height))))))))

(add-hook! 'org-agenda-finalize-hook #'org-agenda-log-mode-colorize-block)
#+end_src

**** Go back to the previous top-level heading
***** TODO test further
#+begin_src emacs-lisp :tangle no
(defun org-back-to-top-level-heading ()
  "Go back to the current top level heading."
  (interactive)
  (or (re-search-backward "^\* " nil t)
      (goto-char (point-min))))
#+end_src

* DOCS
** docs | old
*** fonts
source: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Fonts.html][emacs - fonts GNU manual]]
‘slant’
One of ‘italic’, ‘oblique’, or ‘roman’.

‘weight’
One of ‘light’, ‘medium’, ‘demibold’, ‘bold’ or ‘black’.

‘style’
Some fonts define special styles which are a combination of slant and weight. For instance, ‘Dejavu Sans’ defines the ‘book’ style, which overrides the slant and weight properties.

‘width’
One of ‘condensed’, ‘normal’, or ‘expanded’.

‘spacing’
One of ‘monospace’, ‘proportional’, ‘dual-width’, or ‘charcell’.

 Doom exposes five (optional) variables for controlling fonts in Doom:

 - `doom-font' -- the primary font to use
 - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
   - used in websites? eww?
   - headers?

*** theme
**** load theme

 There are =two ways= to load a theme. Both assume the theme is installed and
 available.

 You can either set =doom-theme= or =manually= load a theme with the =load-theme= function (This is the =default=:)

**** favs
***** dark
- solarized-dark
- one
- horizon - nice red accents and purple
- dracula
- solarized-dark-high-contrast
- ayu-mirage
- snazzy
- moonlight
- material - nice purple dotts and cursor
- monokai-octagon

***** light
- doom-solarized-light
- earl grey
***** really light white light
- doom-winter-is-coming-light
- ayu light
- one light
***** pastel
- ephemeral
- nord-aurora
*** nerd font experiement
**** mononoki
kinda nice and kawaii
#+begin_src emacs-lisp :tangle no
(setq doom-font (font-spec :family "Mononoki Nerd Font" :size 17 :weight 'semi-bold ))
#+end_src
**** iosevka
***** comfy
#+begin_src emacs-lisp :tangle no
(setq doom-font (font-spec :family "Iosevka Comfy" :size 16 :weight 'regular ))
#+end_src
***** term
#+begin_src emacs-lisp :tangle no
(setq doom-font (font-spec :family "Iosevka Nerd Font" :size 16 :weight 'medium ))
#+end_src

**** zed mono
#+begin_src emacs-lisp :tangle no
(setq doom-font (font-spec :family "ZedMono Nerd Font" :size 17 :weight 'regular ))
#+end_src

**** martian mono
#+begin_src emacs-lisp :tangle no
(setq doom-font (font-spec :family "MartianMono Nerd Font" :size 14 :weight 'regular ))
#+end_src

**** caskaydia
***** code
#+begin_src emacs-lisp :tangle no
(setq doom-font (font-spec :family "Cascadia Code" :size 15 :weight 'semibold ))
#+end_src
***** mono
kinda nice
#+begin_src emacs-lisp :tangle no
(setq doom-font (font-spec :family "Cascadia Mono" :size 15 :weight 'semibold ))
#+end_src

**** lilex
nice l and i
#+begin_src emacs-lisp :tangle no
(setq doom-font (font-spec :family "Lilex Nerd Font" :size 15 :weight 'normal ))
#+end_src

**** fira
nice defaults
#+begin_src emacs-lisp :tangle no
(setq doom-font (font-spec :family "FiraMono Nerd Font" :size 15 :weight 'medium ))
#+end_src

**** shure
boxy nice stuff 😃
#+begin_src emacs-lisp :tangle no
(setq doom-font (font-spec :family "ShureTechMono Nerd Font" :size 15 :weight 'medium ))
#+end_src

**** lekton
nice little font actually :)
#+begin_src emacs-lisp :tangle no
(setq doom-font (font-spec :family "Lekton Nerd Font Mono" :size 18 :weight 'bold ))
#+end_src

**** space mono
use with rofi as well...clean cut font but kinda thin and no semibold
#+begin_src emacs-lisp :tangle no
(setq doom-font (font-spec :family "SpaceMono Nerd Font Mono" :size 16 :weight 'regular ))
#+end_src

**** Monofur
kawaii - but does not look nice for ide maybe for ui?
#+begin_src emacs-lisp :tangle no
(setq doom-font (font-spec :family "Monofur Nerd Font" :size 18  :weight 'regular ))
#+end_src

**** SauceCode Pro
#+begin_src emacs-lisp :tangle no
(setq
 doom-font (font-spec :family "SauceCodePro Nerd Font" :size 16  :weight 'regular ))
#+end_src

**** Geist
sublime... kinda similar to monaspace... weird ls , i is clean 0 o O
#+begin_src emacs-lisp :tangle no
(setq doom-font (font-spec :family "GeistMono Nerd Font" :size 16  :weight 'normal ))
#+end_src

**** monaspace
one family, 5 fonts, 3 variable axes


|------+---------+--------------------|
| abbr | name    | font (actual)      |
|------+---------+--------------------|
| Ne   | Neon    | Neo-grotesque sans |
| Ar   | Argon   | Humanist sans      |
| Xe   | Xenon   | Slab serif         |
| Ra   | Radon   | Handwriting        |
| Kr   | Kyrpton | Mechanical sans    |
|------+---------+--------------------|

#+begin_src emacs-lisp :tangle no
;; (setq doom-font (font-spec :family "Monaspace Neon" :size 16 :weight 'semibold ))
(setq doom-font (font-spec :family "Monaspace Krypton" :size 16 :weight 'normal ))
#+end_src

*** options
- var:doom-font: the primary font for Emacs to use.
- var:doom-variable-pitch-font: used for non-monospace fonts (e.g. when using variable-pitch-mode or mixed-pitch-mode). Popular for text modes, like Org or Markdown.
- var:doom-emoji-font: used for rendering emoji. Only needed if you want to use a font other than your operating system’s default.
- var:doom-symbol-font: used for rendering symbols.
- var:doom-serif-font: the sans-serif font to use wherever the face:fixed-pitch-serif face is used.
- var:doom-big-font: the large font to use when fn:doom-big-font-mode is active.
