#+title: init.el
#+auto_tangle: t
#+startup: indent content

+ loads early before anything else, after the Doom core is loaded
+ enabled in both interactive and non-interactive sessions
This file controls what Doom modules are enabled and what order they load in. Remember to run 'doom sync' after modifying it!
doom! block

#NOTE Press =SPC h d h= - Doom's documentation. There you'll find a link to Doom's Module Index where all of our modules are listed, including what flags they support.

#NOTE Move your cursor over a module's name (or its flags) and press =K' (or . This works on flags as well (those symbols that start with a plus).

Alternatively, press =gd= on a module to browse its

#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-
;;      directory (for easy access to its source code).
(doom!
#+end_src

** input
#+begin_src emacs-lisp :tangle init.el
:input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row
#+end_src

** completion
#+begin_src emacs-lisp :tangle init.el
:completion
       ;; (company +tng +childframe)           ; the ultimate code completion backend ;NOTE deprecated in favor of corfu
       (corfu +orderless +icons)  ; complete with cap(f), cape and a flying feather!
       ;; (helm +childframe +icons +fuzzy )              ; the *other* search engine for love and life
       ;; ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       ;; (ivy +childframe +icons)
       (vertico +icons)           ; the search engine of the future
#+end_src
** ui
#+begin_src emacs-lisp :tangle init.el
:ui
       deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;; doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode +ascii)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;indent-guides     ; highlighted indent columns
       (ligatures +extra)         ; ligatures and symbols to make your code pretty again
       ;; minimap           ; show a map of the code on the side
       ;; ( modeline +light)          ; snazzy, Atom-inspired modeline, plus API
       modeline
       ;; nav-flash         ; blink cursor line after big motions
       ;; neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on ; TODO read further
       (popup +all +defaults)   ; tame sudden yet inevitable temporary windows
       tabs              ; a tab bar for Emacs
       (treemacs +lsp)          ; a project drawer, like neotree but cooler TODO test further
       ;; unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       ;; vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;; (window-select +switch-window +numbers)     ; visually switch windows
       window-select
       workspaces        ; tab emulation, persistence & separate workspaces ;persp-mode
       ;;zen               ; distraction-free coding or writing
#+end_src

** editor
evil +everywhere - essential for minibuffer evil-collections, also jumping between headers. and adding new headers
#+begin_src emacs-lisp :tangle init.el
:editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave +lsp)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       (objed +manual)             ; text object editing for the innocent ;TODO test this
       parinfer          ; turn lisp into python, sort of ;TODO see if need
       rotate-text       ; cycle region at point between text candidates eg false to true
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent
#+end_src

=parinfer=
  Parinfer is a minor mode that aids the writing of Lisp code. It automatically infers parenthesis matching and indentation alignment, keeping your code balanced and beautiful.

  Parinfer is a proof-of-concept editor mode for Lisp programming languages.
  It simplifies the way we write Lisp by auto-adjusting parens when indentation changes and vice versa. The hope is to make basic Lisp-editing easier for newcomers and experts alike
  
  [[https://shaunlebron.github.io/parinfer/]]

=objed=
  This modules adds objed, a global minor-mode for navigating and manipulating text objects.
  It combines the ideas of versor-mode and other editors like Vim or Kakoune and tries to align them with regular Emacs conventions.
  =+manual=:
  Do not activate objed automatically. The user is responsible for calling objed-activate (bound to M-SPC if using the default Emacs bindings).

** emacs

#+begin_src emacs-lisp :tangle init.el
:emacs
       (dired +icons)             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       eww               ; the internet is gross
       (ibuffer +icons)  ; interactive buffer management
       (undo +tree)      ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree
#+end_src

** term
#+begin_src emacs-lisp :tangle init.el
:term
       eshell            ; the elisp shell that works everywhere
       shell             ; simple shell REPL for Emacs
       ;; term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs
#+end_src

** checkers
This module provides syntax checking and error highlighting, powered by flycheck.

I think hunspell increases startup time
#+begin_src emacs-lisp :tangle init.el
:checkers
       ;; syntax              ; tasing you for every semicolon you forget
       (syntax +icons +childframe) ;TODO test if childframe needed and difference in behaviour
       ;; (spell +hunspell) ; tasing you for misspelling mispelling
       ;; spell
       ;; grammar           ; tasing grammar mistake every you make
#+end_src


if not using +flyspell need aspell(and a dictionary)a whether or not you have +hunspell/+enchant
  this is because spell-fu only supports aspell as of yet

** tools
#+begin_src emacs-lisp :tangle init.el
:tools
editorconfig      ; let someone else argue about tabs vs spaces TODO test this
(eval +overlay)     ; run code, run (also, repls) TODO test this
(lookup +dictionary +offline)              ; navigate your code and its documentation
(lsp +peek)               ; M-x vscode
magit
;; make              ; run make tasks from Emacs
pdf               ; pdf enhancements
rgb ; create color str
tree-sitter       ; syntax and parsing, sitting in a tree...
#+end_src

*** defaults
#+begin_src emacs-lisp :tangle init.el
;; taskrunner        ;This module integrates taskrunner into Doom Emacs, which scraps runnable tasks from build systems like make, gradle, npm and the like.
;;ein               ; tame Jupyter notebooks with emacs
;; upload            ; map local to remote projects via ssh/ftp
;; pass              ; password manager for nerds
;;prodigy           ; FIXME managing external services & code builders
;;terraform         ; infrastructure as code
;; tmux              ; an API for interacting with tmux
;;ansible
;;biblio            ; Writes a PhD for you (citation needed)
;;collab            ; buffers with friends
;; ( debugger +lsp)          ; FIXME stepping through code, to help you add bugs
;;direnv
;;docker
#+end_src

** os
#+begin_src emacs-lisp :tangle init.el
:os
       (:if (featurep :system 'macos) macos)  ; improve compatibility with macOS
       (tty +osc)               ; improve the terminal Emacs experience
#+end_src

- +osc ::
  Instead of piping your kill ring through external programs, like =xclip= or
  =pbcopy=, have Emacs emit OSC-52 escape codes instead, allowing Emacs to
  communicate with your clipboard through your terminal, even across SSH
  connections or Tmux. However, this requires [[https://github.com/spudlyo/clipetty#terminals-that-support-osc-clipboard-operations][a supported terminal]].

** lang
#+begin_src emacs-lisp :tangle init.el
:lang
       ;; data              ; config/data formats - csv?
       emacs-lisp        ; drown in parentheses
       json              ; At least it ain't XML
       yaml              ; JSON, but readable
       (java +lsp +tree-sitter)       ; the poster child for carpal tunnel syndrome
       ;; (javascript +lsp)        ; all(hope(abandon(ye(who(enter(here))))))
       ;; latex             ; writing papers in Emacs has never been so fun
       ;; lua               ; one-based indices? one-based indices
       ;; (markdown +grip)          ; writing docs for people to ignore
       (nix +tree-sitter +lsp)               ; I hereby declare "nix geht mehr!"
       (org +present +roam2 +pomodoro +jupyter +journal +brain +dragndrop +pandoc +pretty)
       (python +lsp +pyright +tree-sitter)            ; beautiful is better than ugly
       (web +lsp +tree-sitter)               ; the tubes
       (sh +lsp +tree-sitter)                ; she sells {ba,z,fi}sh shells on the C xor
       (csharp +dotnet +lsp +tree-sitter)            ; unity, .NET, and mono shenanigans
       qt                ; the 'cutest' gui framework ever
#+end_src

pyenv:[[github:shellbj/pyenv.el]]

dragndrop: inline preview for images and file icon + short link for media files

*** org
org-contacts: https://orgmode.org/worg/org-contrib/org-contacts.html
org +roam2 +brain +dragndrop +present +pandoc +pomodoro +pretty
**** pomodoro
=Usage=
+ Move point to a task as you would do with =org-clock-in.= Call org-pomodoro the task will be clocked-in.
+ When there's time for break, the task will be =org-clock-out='ed
+ If you call =org-pomodoro= during a pomodoro, you'll be asked to reset a pomodoro.
  + If you call =org-pomodoro= outside ==org-mode,== you'll be presented with list of recent tasks, as C-u org-clock-in would.

=Customization=
- Most aspects of org-pomodoro can be customized. Examples are the length of pomodoros and breaks (org-pomodoro-length, org-pomodoro-short-break-length, org-pomodoro-long-break-length), sounds, modeline display, if breaks should be clocked (org-pomodoro-clock-break) the behaviour when a pomodoro is reset (org-pomodoro-ask-upon-killing, org-pomodoro-keep-killed-time) etc. Have a look at the org-pomodoro customization group.

- Some workflows benefit from the option to work a few minutes “overtime” to finish a task before taking a break (that is, a slightly dynamic pomodoro time). The option org-pomodoro-manual-break enables this workflow, where a break notification is sent at the end of the pomodoro time but the break is started first when manually calling org-pomodoro.
*** defaults
#+begin_src emacs-lisp :tangle no
:lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am

       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;nim               ; python + lisp at the speed of c
       ;;ocaml             ; an objective camel
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;graphviz          ; diagrams for confusing yourself even more
       ;;purescript        ; javascript, but functional
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace

       ;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;zig               ; C, but simpler

#+end_src

** email
#+begin_src emacs-lisp :tangle init.el
:email
       (mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

#+end_src
*** mu4e
+ Tidied mu4e headers view, with flags from all-the-icons.
+ Consistent coloring of reply depths (across compose and gnus modes).
+ Prettified mu4e:main view.
+ Cooperative locking of the mu process. Another Emacs instance may request access, or grab the lock when it’s available.
+ org-msg integration with +org, which can be toggled per-message, with revamped style and an accent color.
+ Gmail integrations with the +gmail flag.
+ Email notifications with mu4e-alert, and (on Linux) a customised notification style.

** app
#+begin_src emacs-lisp :tangle init.el
:app
       calendar
       ;; twitter ; TODO never works?
       ;; emms
       ;; everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
#+end_src

** config
#+begin_src emacs-lisp :tangle init.el
:config
       literate
       (default +bindings +smartparens)
#+end_src
*** docs
literate config -consists of a $DOOMDIR/config.org. All src blocks within are tangled $DOOMDIR/config.el, by default, when $ doom sync is executed.

=Defaults= module is intended as a “reasonable-defaults” module, but also as a reference for your own private config.
 + A Spacemacs-esque keybinding scheme.
 + Extra Ex commands for evil-mode users.
 + A yasnippet snippets library tailored to Doom emacs.
 + A configuration for (almost) universally repeating searches with ; and ,.
** end
#+begin_src emacs-lisp :tangle init.el
)
#+end_src
