#+title: init.el
#+auto_tangle: t
#+startup: indent content

* init.el
+ loads early before anything else, after the Doom core is loaded
+ enabled in both interactive and non-interactive sessions
This file controls what Doom modules are enabled and what order they load in. Remember to run 'doom sync' after modifying it!
doom! block

#NOTE Press =SPC h d h= - Doom's documentation. There you'll find a link to Doom's Module Index where all of our modules are listed, including what flags they support.

#NOTE Move your cursor over a module's name (or its flags) and press =K' (or . This works on flags as well (those symbols that start with a plus).

Alternatively, press =gd= on a module to browse its

** start - lexical binding
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-
;;      directory (for easy access to its source code).
(doom!
#+end_src

** input
#+begin_src emacs-lisp :tangle init.el
:input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row
#+end_src

** completion
#+begin_src emacs-lisp :tangle init.el
:completion
       ;; (company +tng +childframe)           ; the ultimate code completion backend
       (corfu +orderless)  ; complete with cap(f), cape and a flying feather!
       ;; (helm +childframe +icons +fuzzy )              ; the *other* search engine for love and life
       ;; ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       ;; (ivy +childframe +icons)
       (vertico +icons)           ; the search engine of the future
#+end_src
*** vertico
=Flags=: +icons
The search engine for life and love
- This module enhances the Emacs search and completion experience, and also provides a united interface for project search and replace, powered by ripgrep.

- It does this with several modular packages focused on enhancing the built-in completing-read interface, rather than replacing it with a parallel ecosystem like ivy and helm do. The primary packages are:
 - Vertico, which provides the vertical completion user interface
 - Consult, which provides a suite of useful commands using completing-read
 - Embark, which provides a set of minibuffer actions
 - Marginalia, which provides annotations to completion candidates
 - Orderless, which provides better filtering methods
*** helm

=+childframe#=
Display Helm popups in a floating frame rather than in the pop up window at the bottom.

=+fuzzy=
Enable fuzzy completion for Helm searches.

=+icons=
Enable icons (supports both all-the-icons and treemacs icons).

*** ivy
=+childframe=
Cause Ivy to display in a floating child frame, over Emacs.

=+fuzzy=
Enable fuzzy completion for Ivy searches.

=+icons=
Enable file icons for switch-{buffer,project}/find-file counsel commands.

=+prescient=
Enable prescient filtering and sorting for Ivy searches.

** ui
#+begin_src emacs-lisp :tangle init.el
:ui
       ;; deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;; doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;indent-guides     ; highlighted indent columns
       (ligatures +extra)         ; ligatures and symbols to make your code pretty again
       ;; minimap           ; show a map of the code on the side
       ;; ( modeline +light)          ; snazzy, Atom-inspired modeline, plus API
       modeline
       ;; nav-flash         ; blink cursor line after big motions
       ;; neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on ; TODO read further
       (popup +all +defaults)   ; tame sudden yet inevitable temporary windows
       tabs              ; a tab bar for Emacs
       (treemacs +lsp)          ; a project drawer, like neotree but cooler TODO test further
       unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       (window-select +switch-window +numbers)     ; visually switch windows
       ;; window-select
       workspaces        ; tab emulation, persistence & separate workspaces ;persp-mode
       ;;zen               ; distraction-free coding or writing
#+end_src

*** docs
**** deft - major mode
**** ligatures
This module enables ligatures and arbitrary symbol substitutions with mac-auto-operator-composition-mode (on supported macOS systems) or composition tables (harfbuzz on Emacs 28), falling back on =prettify-symbols-mode= otherwise.

**** emoji
=+ascii=
Enable plain text emojis like :).
=+github=
Enable Github-style emojis like :smile:.
=+unicode=
Enable unicode emojis like 🙂.
**** popup
[[doom-module:ui/popup]]
+extra
Enable extra symbol substitutions in certain modes, for example lambda in lisps are replaced with λ
modeline can be disabled in popups
**** treemacs
***** TODO treemacs-git-mode
+lsp .
**** window-seclect
***** switch window
This module provides several methods for selecting windows without the use of the mouse or spatial navigation (e.g. =C-w {h,j,k,l}=).

The command other-window is remapped to either =switch-window= or =ace-window=, depending on which backend you’ve enabled. It is bound to =C-x o= (and =C-w C-w= for evil users).

It also provides numbered windows and selection with the =winum= package, if desired. Evil users can jump to window N in =C-w <N>= (where N is a number between 0 and 9). Non evil users have =C-x w <N>= instead.
***** numbers
Enable numbered windows and window selection (using =winum=).

** editor
#+begin_src emacs-lisp :tangle init.el
:editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       (objed +manual)             ; text object editing for the innocent ;TODO test this
       parinfer          ; turn lisp into python, sort of ;TODO see if need
       rotate-text       ; cycle region at point between text candidates eg false to true
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent
#+end_src
*** explainer
+ parinfer
 
  Parinfer is a minor mode that aids the writing of Lisp code. It automatically infers parenthesis matching and indentation alignment, keeping your code balanced and beautiful.

  Parinfer is a proof-of-concept editor mode for Lisp programming languages.
  It simplifies the way we write Lisp by auto-adjusting parens when indentation changes and vice versa. The hope is to make basic Lisp-editing easier for newcomers and experts alike
  
  a. source:[[https://shaunlebron.github.io/parinfer/]]

+ =file-templates= - This module adds file templates for blank files, powered by yasnippet.
+ =fold= - This module marries hideshow, vimish-fold, and outline-minor-mode to bring you marker, indent and syntax-based code folding for as many languages as possible.
+ The o/O keys will respect and continue commented lines (can be disabled by setting ~+evil-want-o/O-to-continue-comments~ to nil).
+ in visual mode =#= =*= search for the selection instead of just the word under cursor
+ =objed=
  This modules adds objed, a global minor-mode for navigating and manipulating text objects.
  It combines the ideas of versor-mode and other editors like Vim or Kakoune and tries to align them with regular Emacs conventions.
  +manual
  Do not activate objed automatically. The user is responsible for calling objed-activate (bound to M-SPC if using the default Emacs bindings).

** emacs

#+begin_src emacs-lisp :tangle init.el
:emacs
       (dired +icons +ranger)             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       eww               ; the internet is gross
       (ibuffer +icons)  ; interactive buffer management
       (undo +tree)      ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree
#+end_src

*** ibuffer
+ Adds project-based grouping of buffers
+ Support for file-type icons
+ Uses human-readable file-size
*** dired
=+icons=
Enable file type icons in dired buffers, using all-the-icons.

=+ranger=
Make dired behave like ranger.

*** git
This module augments Emacs builtin version control support and provides better integration with git.

** term
#+begin_src emacs-lisp :tangle init.el
:term
       eshell            ; the elisp shell that works everywhere
       shell             ; simple shell REPL for Emacs
       term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs
#+end_src

** checkers
This module provides syntax checking and error highlighting, powered by flycheck.
#+begin_src emacs-lisp :tangle init.el
:checkers
       syntax              ; tasing you for every semicolon you forget
       (syntax +childframe)
       ;; (spell +flyspell) ; tasing you for misspelling mispelling
       ;; (spell +hunspell) ; tasing you for misspelling mispelling
       ;; spell
       ;; grammar           ; tasing grammar mistake every you make
#+end_src

*** spell
=+aspell=
Use aspell as a backend for correcting words.

=+enchant=
Use enchant-2 as a backend for correcting words.

=+everywhere=
Spell check in programming modes as well (in comments).

=+flyspell=
Use flyspell instead of spell-fu. It’s significantly slower, but supports multiple languages and dictionaries.

=+hunspell=
Use hunspell as a backend for correcting words.
*** syntax

=+childframe=
Enables displaying completion candidates in a child frame, rather than an overlay or tooltip (among with other UI enhancements).

** tools
#+begin_src emacs-lisp :tangle init.el
:tools
       ;; editorconfig      ; let someone else argue about tabs vs spaces TODO test this
       (eval +overlay)     ; run code, run (also, repls) TODO test this
       (lookup +dictionary +offline)              ; navigate your code and its documentation
       (lsp +peek)               ; M-x vscode
       ;; (magit +forge)             ; a git porcelain for Emacs
       magit
       ;; make              ; run make tasks from Emacs
       pdf               ; pdf enhancements
       rgb ; TODO test if works
       tree-sitter       ; syntax and parsing, sitting in a tree...
       ;; taskrunner        ;This module integrates taskrunner into Doom Emacs, which scraps runnable tasks from build systems like make, gradle, npm and the like.
       ;;ein               ; tame Jupyter notebooks with emacs
       ;; upload            ; map local to remote projects via ssh/ftp
       ;; pass              ; password manager for nerds
       ;;prodigy           ; FIXME managing external services & code builders
       ;;terraform         ; infrastructure as code
       ;; tmux              ; an API for interacting with tmux
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;collab            ; buffers with friends
       ;; ( debugger +lsp)          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
#+end_src

*** docs
**** eval
This modules adds inline code evaluation support to Emacs and a universal interface for opening and interacting with REPLs.

*flags*

+overlay
+ Display evaluation results in an overlay at point rather than the minibuffer. That is, unless the results are too big (<5 lines), in which case it falls back to the minibuffer/popup buffer.
  packages: quickrun

**** lookup
Flags: +dictionary +docsets +offline

Navigate your labyrinthine code and docs
This module adds code navigation and documentation lookup tools to help you quickly look up definitions, references, documentation, dictionary definitions or synonyms.

Jump-to-definition and find-references implementations that just work.
Powerful xref integration for languages that support it.
Search online providers like devdocs.io, stackoverflow, google, duckduckgo, or youtube (duckduckgo and google have live suggestions).
Integration with Dash.app docsets.
Support for online (and offline) dictionaries and thesauruses.

**** lsp
+ +eglot (use instead of default lsp-mode ) - minimal
+ +peek (use lsp-ui-peek)
  Use =lsp-ui-peek= when looking up definitions and references with functionality from the =:tools lookup= module.

To get LSP working, you’ll need to do three things:
+ Enable this module,
+ Install a language server appropriate for your targeted language(s) (a table mapping languages to supported servers can be found in lsp-mode’s README).
+ Enable the +lsp flag on the :lang modules you want to enable LSP support for. If your language’s module doesn’t have LSP support, and you know it can (or should), please let us know! In the meantime, you must configure it yourself (described in the Configuration section).
**** make
This module adds commands for executing Makefile targets.

**** pdf
This module improves support for reading and interacting with PDF files in Emacs.

It uses pdf-tools, which is a replacement for the built-in doc-view-mode for PDF files. The key difference being pages are not pre-rendered, but instead rendered on-demand and stored in memory; a much faster approach, especially for larger PDFs.

Displaying PDF files is just one function of pdf-tools. See its project website for details and videos.
**** rgb
Highlights color hex values and names with the color itself, and provides tools to easily modify color values or formats.
**** taskrunner
This module integrates taskrunner into Doom Emacs, which scraps runnable tasks from build systems like make, gradle, npm and the like.


** os
#+begin_src emacs-lisp :tangle init.el
:os
       (:if (featurep :system 'macos) macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience
#+end_src
** lang
#+begin_src emacs-lisp :tangle init.el
:lang
       data              ; config/data formats
       emacs-lisp        ; drown in parentheses
       json              ; At least it ain't XML
       yaml              ; JSON, but readable
       ;; (java +lsp)       ; the poster child for carpal tunnel syndrome
       ;; (javascript +lsp)        ; all(hope(abandon(ye(who(enter(here))))))
       ;; latex             ; writing papers in Emacs has never been so fun
       (lua +lsp)               ; one-based indices? one-based indices
       (markdown +grip)          ; writing docs for people to ignore
       (nix +lsp)               ; I hereby declare "nix geht mehr!"
       ;; nix
       (org +roam2 +brain +dragndrop +pandoc +pretty)
       (python +lsp +pyright +conda)            ; beautiful is better than ugly
       ;; web               ; the tubes
       (sh +lsp)                ; she sells {ba,z,fi}sh shells on the C xor
#+end_src

org +roam2 +brain +dragndrop +present +pandoc +pomodoro +pretty
pyenv:[[github:shellbj/pyenv.el]]

*** defaults
#+begin_src emacs-lisp :tangle no
:lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am

       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;nim               ; python + lisp at the speed of c
       ;;ocaml             ; an objective camel
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;graphviz          ; diagrams for confusing yourself even more
       ;;purescript        ; javascript, but functional
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace

       ;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;zig               ; C, but simpler

#+end_src

*** docs
**** python
Flags: *+conda +cython +lsp +poetry +pyenv +pyright*
This module adds Python support to Doom Emacs.

- Syntax checking (flycheck)
- Snippets
- Run tests (nose, pytest)
- Auto-format (with =black=, requires :editor format)
- LSP integration (mspyls, pyls, or pyright)

 if +lsp and :tools lsp
 if +pyright
  - lsp-pyright
 else
  - lsp-python-ms

**** web

|---------------------------------------------------------+---------------------------------------------------------------|
| major mode                                              | default language server                                       |
|---------------------------------------------------------+---------------------------------------------------------------|
| web-mode, css-mode, scss-mode, sass-mode, less-css-mode | vscode-css-languageserver-bin, vscode-html-languageserver-bin |
|---------------------------------------------------------+---------------------------------------------------------------|
This module adds support for various web languages, including HTML5, CSS, SASS/SCSS, Pug/Jade/Slim, and HAML, as well as various web frameworks, like ReactJS, Wordpress, Jekyll, Phaser, AngularJS, Djano, and more.

**** nix
This module adds support for the Nix language to Doom Emacs, along with tools for managing Nix(OS).

Including:
- Syntax highlighting
- Completion through company and/or helm
- Nix option lookup
- Formatting (nixfmt)

**** org
***** Module flags
+brain#
Enable org-brain integration.

+dragndrop#
Enable drag-and-drop support for images and files; inserts inline previews for images and an icon+link for other media types.

+gnuplot#
Install gnuplot and gnuplot-mode, which enables rendering images from gnuplot src blocks or plotting tables with org-plot/gnuplot (bound to <localleader> b p, by default).

+hugo#
Enables integration with hugo to export from Emacs well-formed (blackfriday) markdown.

- +journal#
  - Enable org-journal integration.
- +jupyter#
  - Enable Jupyter integration for babel.
- +noter
  - Enable org-noter integration. Keeps notes in sync with a document. Requires pdf-tools (:tools pdf), DocView, or nov.el to be enabled.
- +pandoc
- +pomodoro
- +present
  - Enable integration with reveal.js, beamer and org-tree-slide, so Emacs can be used for presentations. It automatically downloads reveal.js.
- +pretty
  - Enables pretty unicode symbols for bullets and priorities, and better syntax highlighting for latex. Keep in mind: this can be expensive. If org becomes too slow, it’d be wise to disable this flag.
- +roam2
  - Enables integration with org-roam v2. Requires sqlite3 on your system. Incompatible with +roam. This flag will replace +roam in mid-2022.

**** markdown
+grip#
Enables grip support (on <localleader> p), to provide live github-style previews of your markdown (or org) files.
***** TODO test grip
**** data
This module adds Emacs support for CSV and XML files.
**** java lsp
Install the eclipse server by executing M-x lsp-install-server and selecting jdtls. After that any newly opened java files should start the LSP server automatically.

To update the server, perform SPC u M-x lsp-install-server.

Note that if you change Java version you may need to remove the LSP server and install it again. You can do this with M-x +lsp/uninstall-server followed by M-x lsp-install-server.

** email
#+begin_src emacs-lisp :tangle init.el

:email
       (mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

#+end_src
*** mu4e
+ Tidied mu4e headers view, with flags from all-the-icons.
+ Consistent coloring of reply depths (across compose and gnus modes).
+ Prettified mu4e:main view.
+ Cooperative locking of the mu process. Another Emacs instance may request access, or grab the lock when it’s available.
+ org-msg integration with +org, which can be toggled per-message, with revamped style and an accent color.
+ Gmail integrations with the +gmail flag.
+ Email notifications with mu4e-alert, and (on Linux) a customised notification style.
** app
#+begin_src emacs-lisp :tangle init.el
:app
       calendar
       ;; twitter ; TODO never works?
       emms
       ;; everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
#+end_src
** config
#+begin_src emacs-lisp :tangle init.el
:config
       literate
       (default +bindings +smartparens)
#+end_src
*** docs
literate config -consists of a $DOOMDIR/config.org. All src blocks within are tangled $DOOMDIR/config.el, by default, when $ doom sync is executed.

=Defaults= module is intended as a “reasonable-defaults” module, but also as a reference for your own private config.
 + A Spacemacs-esque keybinding scheme.
 + Extra Ex commands for evil-mode users.
 + A yasnippet snippets library tailored to Doom emacs.
 + A configuration for (almost) universally repeating searches with ; and ,.
** end
#+begin_src emacs-lisp :tangle init.el
)
#+end_src
